Here are the steps I came up with to breakdown the night writer project:

*1. Open the text file (FileOpen)
*2. Read the text file (FileReader)

3. Turn plain text into Braille text
   *a. Create a hash of letters (done)
   *b. For each plain text letter, write braille letter on three lines (partially done)
   *c. Support capitalization (done)
   d. Support numbers (yet to be )
   *e. Constrain braille file to 80 characters wide

*4. Write braille text in new text file

*5. Write test files, TDD

Steps:
*1. Turn one letter into 2x3 braille letter
*2. Turn two letters into braille letters
*3. Turn many letters into braille letters
*4. Make a capitalized letter
*5. Support 80 character length
6. Turn braille letters into plain letters
   *a. Read braille file
   *b. Change single string into three strings of braille by separating at the new lines
   *c. Slice! off the first two characters from each string and join into a single string of 6 characters
   *d. Get the corresponding letter using the inverted map
   *e. Make a new string of plain letters
   *f. Output plain letters to the message text file
   *g. Account for capital letters
   *h. Fix output message character length
   *i. Account for messages > 80 characters
7. Support numbers
8. Support contractions
9. Support new lines

Changes performed while project was being developed and important information about those
changes taking place:

 STEP #1
 grab all the elements on line_1, line_2, line_3, and shove in into a new empty array, example
     (line_1 []) << ..0.0.0.0.0......00.0.0.00..
     (line_2 []) << ..00.00.0..0....00.0000..000
     (line_3 []) << .0....0.0.0....0.00.0.0...0.
STEP #2
Create an empty array with a variable name "prep_to_trans" = [])
prep_to_trans = []
prep_to_trans << [[line_1], [line_2], [line_3]]

STEP #3
sort_out(english_translated)
need to sort out line_1[0], line_2[0], line_3[0] into an empty array
and so on for all the remainder strings(letters)

Calculation to turn sort_out the braille_string

[["0.""], [".."], [".."]]

we have english_array
to grab the first braille char
  char = []
  char << english_array[0][0..1]
  char << english_array[1][0..1]
  char << english_array[2][0..1]
  char

"0. 0. 0. .." (based on this braille input)

i 0
  0  i * 2
  1  i * 2 + 1
i 1
  2 i * 2
  3 i * 2 +1
i 2
  4 i * 2
  5 i * 2 + 1
i 3
  6 i * 2
  7 i * 2 +1

  check_num_shift
  so this will iterate through the array in english, will check if shift is in it
  and if it is, then will replace the shift with the character after it in capital,
  will check next one for nil or letter, and if nil moves to the next one, and do the same
  thing over and over again.

  trans_outcome.map.with_index do |letter, index|
  if letter == :shift

  check_input_vs_alphabet(input.split(''))


  def wrap_braille_lines_after_80_chars(final_brl_transl)
  lines_split_80 = final_brl_transl.map {|line| line.scan(/.{1,80}/m)}
  braille_lines_for_print = []
  0.upto(lines_split_80[0].length-1) do |i|
  braille_lines_for_print << lines_split_80[0][i] + "\n" + lines_split_80[1][i] + "\n" + lines_split_80[2][i] + "\n"
  end
  braille_lines_for_print.join
  end
